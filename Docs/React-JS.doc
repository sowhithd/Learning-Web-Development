ES6/ECMAScript2015:(ES stands for European Computer Manufacturer Association Script)
It lays out the specification and basic rules of language on which Javascript is based on.
ES6 is the second major release for JavaScript. Those few mentioned below
let keyword
const keyword
default parameter
rest parameter
spread operator
destructuring
forof loop
modules
map function
arrow function
class
inheritance

* In JavaScript we don't have datatypes. We declare the varible with Var Key word. How "let" keyword is different from "var" key word?
  The  keyword is similar except that let declared variable block scoped variable.

* React is a javascript library which we use to build frontend or user interface.

* When working with, React you in the end write "declarative code", which means you define a target UI state/states not the steps 
  needed to get there. And React will figure out how to get there and perform the necessary steps.

*  React on the other hand embraces declarative programming, with React, you define the goal and React figures out how to get there

* Vanilla JavaScript requires imperative programming.

* Imperative Programming: You define all the steps needed to achieve a result

* It is not framework like angular.

* React is a user interface library.

* React is a tool for building UI components.

* React projects almost always use a "build process" which as part of that build process, injects these script tags into the HTML code. 

* The code you write is not the code that gets executed like this, at least, in the browser. Instead, the code you write is transformed 
  behind the scenes before it's handed off to the browser.

* Features of React:
  * It uses something called JSX(JavaScript XML).
  * We can use TypeScript in react but this is optional not mandatory.
  * It uses Component based architecture.
  * It has something called OneWay data binding.
  * It uses Virtual DOM.

 Note: When writing JSX code, there's one important rule: A JSX value must have only one root element. 

React uses a virtual DOM, basically browser creates the acutal DOM but React  not going to modify the actual DOM and uses Virtual DOM. 
Virtual DOM is significantly faster and most efficient to update. Whatever do we as suppose we have actual DOM's reaction going to create a mirror copy of the actual DOM is called �VirtualDOM�
ReactJS doesn't support entirely Dependency Injection.

In React, a Component is really just a JavaScript function. Though in order to be recognized and used as a Component by React, it's a 
function that must follow two important rules.

 * The function name must start with an uppercase character.

*  The function must return a renderable value, typically the to-be-rendered HTML markup.
----------
* Why we are using Virtual DOM?
    Because actual DOM is slow in its real form.
    Virtual DOM is significantly faster and more efficient to update.
    Due to component based structure we can advantage of Reusability.
    React is better in terms of performance because of light in weight and give us flexibility to choose only the thing that is required.

* Why does the code need to be transformed before injects into browser?
  1). The first reason is that raw unprocessed React code won't execute in the browser. Becuase  React code uses the 
      JSX(JavaScript XML) feature. This would not work because this is not a standard JavaScript feature/syntax.

  2). Another reason is that the code you write would not be optimized for production. Minification simply means that, 
      for example,names of variables or functions are shortened to reduce the amount of JavaScript code
      that's served to the user.

it would not be minified
Mostly because React code uses this special JSX feature.	

NPM stands for Node Package Manager.  It's like a tool which we can  use to manage the dependencies to do a lot of automation. 

About React App Folder and Files:
Package.json --> This is an npm configuration file, it contains app meta data, some scripts and list of dependencies
Package-lock.json --> This is a auto configuration file. This is the auto generated file that get updated whenever NPM does any operation on the package.json file.
node_modules --> This folder contain the dependencies, that source code required in the react project.
public -->  This folder contain 	public assests of the app. It contain �index.html� file where React will mount app root component.
.gitignore --> This  file used by Git to ignore, any file and folder while publishing source code into the remote server.
READE.md --> It provies the  documentation to read  about the project.
Src --> It contains the application source code. Where we create most of the files.
There are three files with similar name but different extions.
Those  files are given below:
Apps.css
App.js
App.test.js

index.css -->This file is the global css file. In this page  we can able to define the styling of entire application.

index.js --> It is the main entry point of the application. Like your main method in C#.  Similarly this is a file which is going to be called intially to start application.

Components in React:	
In React a component represents a part of user interface.
What ever visible on the webpage  is a components, we can put component together makes a bigger component.

Types of Components:
In above State means data
Class Components  -- StateFull
The component data which gets modified dynamically called StateFull. Ex: 
Syntax:
import  { Component } from 'react';//shortcut for import imr

"Note: When importing named exports not default exports in JavaScript, we need to include curly braces around the name."

class HelloClassComponent extends Component {
 render() {
    return <h1>Hello Comment</h1>
 }
}

export default HelloClassComponent;

Functional Components StateLess
In the component there is no changes in data dynamically. Ex: Logos in website they won't change for every action in the component
We can't mantain the state in functional component.
Ex:
function WorldFunctionalComponent() {
    return <h1>World Component</h1>
}

function subComponent() {
    return <h2>sub Component</h2>
}
export default WorldFunctionalComponent;

In React version 16.4  they introduce the concept of hook which make possible to do everything with functional component.
(Means Stateful is possible with functional component)

InterCommunication between Components:
Using Porps we can pass the data between components
Context API --> This is a part of react library
Statement Library -->	redux, flux

Props:
* Props are a fundamental concept for building reusable and dynamic components. 
* They act as a way to pass data and configuration settings from parent components to their child components and they are read-only objects

// Parent component
const Parent = () => {
  const name = "Alice";
  return (
    <div>
      <Welcome name={name} /> {/* Pass the name prop */}
    </div>
  );
};

// Child component
const Welcome = (props) => {
  return (
    <h1>Hello, {props.name}!</h1>  {/* Access the prop using props.name */}
  );
};


Below example explains how and when we can use children property available in props.

//Parent 
const HomePage = () => {
  return (
    <div>
      <TabButton>Click on Edit</TabButton>
       <TabButton>Submit</TabButton> 
    </div>
  );
};

//Child
const TabButton = (props) => {

    return <li><button></button></li>
};

* We don't get an error, but we also don't see any buttons text shown in UI browser even though we have this text here.

* Reason is this text is basically ignored by React because if I pass something between component opening and closing tags, this 
  content is by default not output on the page because React would not know where to output it. I mean after all, you are telling React
  that your custom component should be output on the page. So how would React know what to do with this text here?

* Every custom component accept props. Even if you're not setting any custom attributes. React will still give you a props object.  
  This props object will have a property called children. 
  
* This children property will contain the content that you passed between component opening and closing tags. And can be accessed
  like below. We don't set any value to children property. Instead, this children prop here simply refers
  to the content between your component. Whichever content you have between custom component either a text or a complex JSX structure.

  //Child
const TabButton = (props) => {
    return <li><button>{props.children}</button></li>
};


* The above mentioned way of building Components where your Components can wrap other Components or other content is called 
  "component composition".


useState:
 It is a strong recommendation by the React team. It's a best practice in the React world and it is simply something you should memorize.
 When updating your state based on the previous value of that state, you should pass a function to that state updating function instead
 of that new state value you wanna have

 Ex: 
 const [isEditing,setIsEditing] = useState(false);

function handleEditPlayer(){
    setIsEditing(!isEditing);
}

Instead of that:

const [isEditing,setIsEditing] = useState(false);

function handleEditPlayer(){
    setIsEditing((editing)=>!editing);
}


why do you pass a function?
Because this function which you pass here will be called by React and it will automatically get the current state value.
Using this function apporach React is scheduling these state updates. React will always be working with the latest available state value. 


It's also strongly recommended that if your state is an object or array, you update that state in an "immutable way", which simply 
means you create a copy of the old state so a new object or a new array first, and you then just change that copy instead of that 
existing object or array

Ex:
Not Creating a copy:

const updatedUser = user;
user.name = 'Max';

Creating a Copy via JavaScript spread Operator:
const updatedUser = {...user};
user.name = 'Max';

In above we are updating object that copied from Original object.

And the reason for that recommendation is that if your state is an object or array you are dealing with a reference value in JavaScript.
And therefore if we updating array/object wihtout creating a clone of original reference you would be updating the old value 
in-memory immediately, even before the scheduled state update was executed by React. And this can again lead to strange bugs or 
side effects if you have multiple places in your application that are scheduling state updates for the same state.



Styling in React Components:
The "<Component_Name>.module.css" file naming convention is associated with "CSS Modules", a CSS file in which all class and animation 
names are scoped locally by default. This is typically used in modern JavaScript frameworks like React to avoid naming conflicts and 
apply styles scoped to specific components.

Option_1:

CSS Modules
Key Features:
* Scoped Styles: CSS Modules automatically scope styles locally, so you don't have to worry about global name clashes.
* Dynamic Class Names: Class names are dynamically generated to ensure uniqueness.
* Composition: You can compose multiple classes together.

Ex:
<Component_Name>.module.css:
/* styles are scoped locally */
.title {
  color: blue;
  font-size: 24px;
}

.description {
  color: gray;
  font-size: 16px;
}

Component_Name.jsx:

import React from 'react';
import styles from './Component.module.css';

const Component = () => {
  return (
    <div>
      <h1 className={styles.title}>Hello, World!</h1>
      <p className={styles.description}>This is a description.</p>
    </div>
  );
};

export default Component;

Explanation:
* Scoped Styles: In the example above, the title and description classes defined in Component.module.css are scoped to the 
                 Component component. 
                 This means you can use the same class names in different components without worrying about style conflicts.
* Importing Styles: When you import styles from ./Component.module.css, you get an object where keys are the original class names 
                    and values are the unique, generated class names.
* Using Styles: You apply the styles by referencing styles.className in your JSX. This ensures that the generated class names are 
                applied correctly.


Option_2:
Styled Components:
URL: https://styled-components.com/

Styled Components is a library for React and React Native that allows you to use component-level styles in your application. 
It leverages tagged template literals to style your components, providing a clean and expressive way to manage styles with JavaScript.

Library to be installed using npm/yarn Ex: (npm install styled-components OR yarn add styled-components)

Key Features of Styled Components:
* Scoped Styles: Styles are scoped to the component, avoiding global style conflicts.
* Dynamic Styling: You can pass props to dynamically style components.
* Theming: Easily create and manage themes.
* Automatic Vendor Prefixing: Handles browser prefixes automatically.

Ex:

import React from 'react';
import styled from 'styled-components';

const Button = styled.button`
  background: ${props => props.primary ? 'blue' : 'gray'};
  color: white;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid ${props => props.primary ? 'blue' : 'gray'};
  border-radius: 3px;
  cursor: pointer;

  &:hover {
    background: ${props => props.primary ? 'darkblue' : 'darkgray'};
  }
`;

const App = () => {
  return (
    <div>
      <Button primary>Primary Button</Button>
      <Button>Secondary Button</Button>
    </div>
  );
};

export default App;


Strict Mode:
 URL: https://reactjs.org/docs/strict-mode.html
 * In the end it is simply a component you import from React, a built-in component called StrictMode.
 * So StrictMode is a component provided by React and you therefore use it like a component.
 * To be precise, it is a component that's meant to be wrapped around other components.

* StrictMode does a couple of things behind the scenes that can help us catch certain problems in our app.
  * The most important things the StrictMode component does is that it will "execute every component function twice
    instead of just once" in development mode. When executing in production component execution happens only once.
    But it does that during development because when every component gets executed twice. 


Ex: index.jsx file code:

import { StrictMode } from "react";
import ReactDOM from "react-dom/client";

import App from "./App.jsx";
import "./index.css";
import React from "react";

ReactDOM.createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>
);

* In application we can wrap the App component with the opening and closing tags of the StrictMode component.  And that's what I meant 
   when I said you could use it anywhere in your application. We don't have to wrap the root component.


Ref in React:
* Well, a ref in React is a value, just as the useState varaible in the end is a value. But difference is it's a special kind of value
  or it's managed by React in a special way to be precise.

* Now we can create such a ref value in React by importing the use ref hook from React.


Prop drilling:
It is a term used to describe the process of passing data from a parent component to a deeply nested child component through intermediary 
components. 
This can become cumbersome and lead to less maintainable code, especially when the data needs to be passed through many layers.

Component composition :
* Component Composition is a concept in React that allows developers to build complex applications by combining small, reusable components.
* It is a powerful feature in React that allows you to build complex UIs from smaller, reusable components. 
* Instead of passing data through props (as in prop drilling), component composition focuses on how components are nested and combined 
  to create the desired structure and behavior.

Advantages of Component Composition
* Reusability: Smaller components can be reused across different parts of the application, reducing duplication.
* Maintainability: Code is easier to read and maintain when it's broken down into smaller, focused components.
* Flexibility: Composing components allows for more flexible and dynamic UIs, where components can be nested and combined in various ways.

Advanced Composition: Children and Render Props
* For more advanced use cases, you can leverage the children prop or render props pattern.

Ex: 
Check in folder ReactJS Learning\Part_8_Component Composition_useReducer_ContextAPI, where we have moved the Product Component to
App Component from Shop Component and in Shop Component we used "Children Prop" to render Product Comment in this way we have avoided
prop drilling. Means in Shop Componet the prop passed is not uesful for Shop Component that is needed for Product Component.

Shop Component:

import { DUMMY_PRODUCTS } from '../dummy-products.js';

export default function Shop({ children }) {
  return (
    <section id="shop">
      <h2>Elegant Clothing For Everyone</h2>

      <ul id="products">
       {children}
      </ul>
    </section>
  );
}

App Component:
import { useState } from 'react';

import Header from './components/Header.jsx';
import Shop from './components/Shop.jsx';
import { DUMMY_PRODUCTS } from './dummy-products.js';

function App() {
  function handleAddItemToCart(){//logic}

  return (
    <>
      <Header
        cart={shoppingCart}
        onUpdateCartItemQuantity={handleUpdateCartItemQuantity}
      />
      <Shop>
       {DUMMY_PRODUCTS.map((product) => (
          <li key={product.id}>
            <Product {...product} onAddToCart={onAddItemToCart} />
          </li>
        ))}
      </Shop>
    </>
  );
};


More Examples:

Using Children Prop:

import React from 'react';

const Card = ({ children }) => {
  return <div className="card">{children}</div>;
};

const App = () => {
  return (
    <Card>
      <Header title="Card Title" />
      <Content>This is the content of the card.</Content>
      <Footer text="Footer text" />
    </Card>
  );
};


Using Render Props:
import React from 'react';

const Card = ({ renderHeader, renderContent, renderFooter }) => {
  return (
    <div className="card">
      {renderHeader()}
      {renderContent()}
      {renderFooter()}
    </div>
  );
};

const App = () => {
  return (
    <Card
      renderHeader={() => <Header title="Card Title" />}
      renderContent={() => <Content>This is the content of the card.</Content>}
      renderFooter={() => <Footer text="Footer text" />}
    />
  );
};

Content API:
The Context API is a feature in React that allows you to manage global state in a way that avoids 
"prop drilling" (the process of passing props down multiple levels of components). 
It provides a way to share values like data and functions between components without having to pass props through every level of the tree.
This makes it easier to manage state and props, especially in larger applications.

How Context API Works
* Create Context: Set up a context where you define the shared data.
* Provider: Place a Provider component at a high level in your component tree. This Provider supplies the context to its child components.
* Consumer: Any component that needs the shared data can use a Consumer or the useContext hook to access it.



Redux:
Redux is Javascript based library used for state management .
Redux is one of the independent library we can use for maintaing a state globally. That  mean it is used for the intercommunication
 between the component.
Redux is a  JavaScript State management library.
The idea is to maintain centrally/globally data which can accessed by any component  irrespective of the position and order of 
the component, otherwise we have to pass data to each and every component in the component tree.

Redux Architecture:
It has three main components:-
Store   : Entire state of application is listed and managing status of the app at  given point of time.
Action  : A pure object contained within the store having the information the user event , the action is send from the view to the reducer.
Reducer : Reducer is a function which is able to read the payload (means the data that has been submitted from the component) 
          from the action and  then execute  to updating the store. 


Tools:
Vite: Used to create local React projects(https://vitejs.dev/), tool which do transform your code to code that can be executed 
      efficiently in the browser.

Create-React-App: Create React App is an officially supported way to create single-page React applications. 
                    It offers a modern build setup with no configuration. (https://create-react-app.dev/)